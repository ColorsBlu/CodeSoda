/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* getBST(TreeNode* root,TreeNode* &start, int low, int high){
        if((root == NULL) || (root->left == NULL && root->right == NULL))
            return root;
        if(root->val > high){
            cout<<"root"<<root->val;
            start = root->left;
            getBST(root->left, start, low, high);
        }else if(root->val < low){
            start = root->right;
            getBST(root->right, start, low, high);
        }
        else {
            if(root->left != NULL && root->left->val < low){
                root->left = root->left->right;
                getBST(root, start, low, high);
            }
            if(root->right != NULL && root->right->val > high){
                root->right = root->right->left;
                getBST(root, start, low, high);
            } 
            getBST(root->left, start, low, high);
            getBST(root->right, start, low, high);
        }
        return start;
    }
    
    TreeNode* trimBST(TreeNode* root, int low, int high) {
        if(root == NULL)
            return root;
        return getBST(root, root, low, high);
    }
};
